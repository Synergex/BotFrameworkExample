import System
import System.Collections
import System.Collections.Generic
import System.Text
import System.Threading.Tasks
import Microsoft.Bot.Builder.Dialogs
import Microsoft.Bot.Connector
import DataLogic

namespace DataLogic.ConferenceDialog

	public partial class ConferenceDialog implements IDialog<object>
	
		private async method ReplyWithPresenterByID,	@Task
			context			,@IDialogContext
			myID			,int
			endparams
		proc
			;the input integer is the ID of a presenter
			;search for that presenter, and return the data to the user
			;data myfirstname, string, message.Text
			data myRetrieveData, @RetrieveData, new RetrieveData()
			data arraylist, @ArrayList
			data pres_rec, pres_struct
			arraylist = myRetrieveData.getPresenterByID(myID)

			;Now that we have the data, check how many records were returned.
			;If no records were returned, inform the user.
			;If one record was returned, display details about the presenter.
			;Since the presenter ID key doesn't allow duplicates, we won't test for multiple values.
			if (arraylist == ^null || arraylist.count == 0) then
			begin
				await context.PostAsync("Sorry, I couldn't find anything about P" + %string(myID) + ".")
			end
			else
			begin
				foreach pres_rec in arraylist
				begin
					await context.PostAsync("Here's what I found about P" + %string(myID) + ": ")

					await Task.Delay(300)
					await context.PostAsync(%atrim(pres_rec.firstname) + " " + %atrim(pres_rec.lastname) 
					&	+ " (Presenter ID: P" + %string(pres_rec.presenterid) + ")")

					;Print title and company, if applicable
					await Task.Delay(300)
					if (%atrim(pres_rec.company) .nes. "")
					begin
						if (%atrim(pres_rec.title) .nes. "") then
						begin
							await context.PostAsync(%atrim(pres_rec.title) + " at " + %atrim(pres_rec.company) + ".")
						end
						else
						begin
							await context.PostAsync("Works at " + %atrim(pres_rec.company) + ".")
						end
					end

					await Task.Delay(400)
					if (%atrim(pres_rec.bio) .nes. "")
					begin
						await context.PostAsync("Bio: " + %atrim(pres_rec.bio))
					end

					;TODO: Add code for fun fact
				end
			end

		endmethod

	endclass

endnamespace
